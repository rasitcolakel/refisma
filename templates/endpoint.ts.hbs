import { NextApiRequest, NextApiResponse } from 'next'
import { {{#each methods}} {{name}}{{@root.name}} {{#unless @last}},{{/unless}} {{/each}} } from '@services/{{name}}Service'
import { Prisma } from '@prisma/client';

// Types for the requests
{{#each methods}}
    type {{name}}Request = NextApiRequest 
    {{#if this.requestParams.length}}
        &{
        {{#each this.requestParams}}
        {{#if this.values}}
            {{this.name}}:{{#each this.values}}{
                {{this.name}}:{{this.type}}{{#unless @last}},{{/unless}}
            },
            {{/each}}
        {{else}}
            {{this.name}}:{{this.type}}{{#unless @last}},{{/unless}}
        {{/if}}
        {{/each}}

        }
    {{/if}}
{{/each}}


const endpoints =[
{{#each methods}}
    {
        method: '{{method}}',
        handler: async (req: {{name}}Request, res: NextApiResponse) => {
            try {
                const response = await {{name}}{{@root.name}}({{#each params}}{{this.from}}{{#unless @last}},{{/unless}}{{/each}}) 
                res.status(200).json(response)
            } catch (error: any) {
                res.status(500).json({
                    message: error.message,
                })
            }
        },
    },
{{/each}}
]

const handler = async (req: any, res: NextApiResponse) => {
    const endpoint = endpoints.find((endpoint) => endpoint.method === req.method)

    if (!endpoint) {
        res.status(404).json({
            message: 'Not found',
        })
    }else{
        endpoint.handler(req, res)
    }
}

export default handler;