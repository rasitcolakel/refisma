{{> imports name=name imports=imports }}

interface Props {
    {{#each relationFields.[0]}}
        {{{this.type}}};
    {{/each}}
}

export default function {{name}}Create({
    {{#each relationFields.[0]}}
        {{{this.name}}} {{#unless @last}},{{/unless}}
    {{/each}} 
}:Props) {
    const t = useTranslate();
    const {
        saveButtonProps,
        refineCore: { formLoading },
        register,
        control,
        formState: { errors },
    } = useForm<{{name}}Select, HttpError>({
        refineCoreProps: {
            queryOptions: {
                initialData: {{idField}}Data
            },
        },
    });

    {{{relationFields.[1]}}}

    return (
        <Edit isLoading={formLoading} saveButtonProps={saveButtonProps} saveButtonProps={
            {{#if manyToManyRelations.length}}
                {
                    ...saveButtonProps,
                    onClick: (e) => {
                        {{> manyToManyMapper manyToManyRelations=manyToManyRelations action="create"}}
                        saveButtonProps.onClick(e)
                    }
                }
            {{else}}
                saveButtonProps
            {{/if}}
        }>
            {{{formFields}}}>
            {{{formFields}}}
        </Edit>   
    );
}

{{> getServerSideProps initialResources=relationFields.[0]  }}

